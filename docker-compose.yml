services:
  postgres:
    image: 'postgres:latest'
    container_name: postgres
    networks:
      - microservices-network
    restart: always
    environment:
      POSTGRES_USER: ${LOCAL_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${LOCAL_DATABASE_PASSWORD}
      POSTGRES_DB: ${LOCAL_DATABASE_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"

  mongodb:
    image: 'mongo:latest'
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MG_DATABASE_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MG_DATABASE_PASSWORD}
    volumes:
      - mongo-db:/data/db
    networks:
      - microservices-network
    ports:
      - "27017:27017"
    env_file:
      - .env
  redis:
    image: 'redis:latest'
    container_name: redis
    restart: always
    volumes:
      - cache:/data
    networks:
      - microservices-network
    ports:
      - "6379:6379"
    env_file:
      - .env
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices-network
  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - microservices-network
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
        DYNAMIC_CONFIG_ENABLED: 'true''
      networks:'
      - microservices-network
  prometheus:
    container_name: prometheus
    restart: always
    image: prom/prometheus:latest
    ports:
      - "9100:9100"
    command:
      - '--web.listen-address=:9100'
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - microservices-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana
    restart: always
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - "grafana-storage:/var/lib/grafana"
    networks:
      - microservices-network
  ##Services
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761" ]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "9090:9090"
    depends_on:
      - eureka-server
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090" ]
      interval: 30s
      timeout: 10s
      retries: 5
    env_file:
      - .env

  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - api-gateway
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    env_file:
      - .env

  project-service:
    build: ./project-service
    container_name: project-service
    ports:
      - "8083:8083"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    env_file:
      - .env

  send-email-service:
    build: ./send-email-service
    container_name: send-email-service
    ports:
      - "8085:8085"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    env_file:
      - .env
  tasks-service:
    build: ./tasks-service
    container_name: tasks-service
    ports:
      - "8082:8082"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    env_file:
      - .env
  client-service:
    build: ./client-service
    container_name: client-service
    ports:
      - "8084:8084"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    env_file:
      - .env

networks:
  microservices-network:
    driver: bridge

volumes:
  grafana-storage:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  cache:
    driver: local
  mongo-db:
    driver: local
  postgres-data:
    driver: local

